//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControl"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""bde2b925-1b0e-4106-bc1d-3c90b454b0f2"",
            ""actions"": [
                {
                    ""name"": ""UpKey"",
                    ""type"": ""Button"",
                    ""id"": ""cac3b310-e1db-4be1-8aa5-76bf8e92d678"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownKey"",
                    ""type"": ""Button"",
                    ""id"": ""b391b4c4-8693-4963-84de-3d7779ed9530"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftKey"",
                    ""type"": ""Button"",
                    ""id"": ""2034c5fe-aa84-4129-8490-6693eb325dde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightKey"",
                    ""type"": ""Button"",
                    ""id"": ""6925fc04-7c39-4ba9-bf42-e30430356126"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Decide"",
                    ""type"": ""Button"",
                    ""id"": ""265167a2-ef92-4086-8c16-1e8b19fe34be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""36b990a6-1af8-4a14-871d-371fee30c328"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c20569b1-3e6f-441b-b775-8df30b0ad6f5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2af79289-7a1e-4009-b421-22c5f69143d0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c28bb1f0-a74e-416e-8c0a-4e456b8d0fde"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53603258-2274-40ab-88e3-9b26effadea9"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b49c2104-5c4a-40f2-855a-024c493fa487"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c8d934e-8f77-4e2e-890a-cc26d7a3ebe6"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feffc5ce-4797-4de9-95c3-3d27a576c78c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c48090a6-7538-467c-848a-5fc84ac8a79b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8895e36-2360-4a7c-9815-97ae0b4f4144"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_UpKey = m_Player.FindAction("UpKey", throwIfNotFound: true);
        m_Player_DownKey = m_Player.FindAction("DownKey", throwIfNotFound: true);
        m_Player_LeftKey = m_Player.FindAction("LeftKey", throwIfNotFound: true);
        m_Player_RightKey = m_Player.FindAction("RightKey", throwIfNotFound: true);
        m_Player_Decide = m_Player.FindAction("Decide", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_UpKey;
    private readonly InputAction m_Player_DownKey;
    private readonly InputAction m_Player_LeftKey;
    private readonly InputAction m_Player_RightKey;
    private readonly InputAction m_Player_Decide;
    public struct PlayerActions
    {
        private @InputControl m_Wrapper;
        public PlayerActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpKey => m_Wrapper.m_Player_UpKey;
        public InputAction @DownKey => m_Wrapper.m_Player_DownKey;
        public InputAction @LeftKey => m_Wrapper.m_Player_LeftKey;
        public InputAction @RightKey => m_Wrapper.m_Player_RightKey;
        public InputAction @Decide => m_Wrapper.m_Player_Decide;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @UpKey.started += instance.OnUpKey;
            @UpKey.performed += instance.OnUpKey;
            @UpKey.canceled += instance.OnUpKey;
            @DownKey.started += instance.OnDownKey;
            @DownKey.performed += instance.OnDownKey;
            @DownKey.canceled += instance.OnDownKey;
            @LeftKey.started += instance.OnLeftKey;
            @LeftKey.performed += instance.OnLeftKey;
            @LeftKey.canceled += instance.OnLeftKey;
            @RightKey.started += instance.OnRightKey;
            @RightKey.performed += instance.OnRightKey;
            @RightKey.canceled += instance.OnRightKey;
            @Decide.started += instance.OnDecide;
            @Decide.performed += instance.OnDecide;
            @Decide.canceled += instance.OnDecide;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @UpKey.started -= instance.OnUpKey;
            @UpKey.performed -= instance.OnUpKey;
            @UpKey.canceled -= instance.OnUpKey;
            @DownKey.started -= instance.OnDownKey;
            @DownKey.performed -= instance.OnDownKey;
            @DownKey.canceled -= instance.OnDownKey;
            @LeftKey.started -= instance.OnLeftKey;
            @LeftKey.performed -= instance.OnLeftKey;
            @LeftKey.canceled -= instance.OnLeftKey;
            @RightKey.started -= instance.OnRightKey;
            @RightKey.performed -= instance.OnRightKey;
            @RightKey.canceled -= instance.OnRightKey;
            @Decide.started -= instance.OnDecide;
            @Decide.performed -= instance.OnDecide;
            @Decide.canceled -= instance.OnDecide;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnUpKey(InputAction.CallbackContext context);
        void OnDownKey(InputAction.CallbackContext context);
        void OnLeftKey(InputAction.CallbackContext context);
        void OnRightKey(InputAction.CallbackContext context);
        void OnDecide(InputAction.CallbackContext context);
    }
}
